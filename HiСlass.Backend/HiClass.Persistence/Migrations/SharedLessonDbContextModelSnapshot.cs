// <auto-generated />
using System;
using HiClass.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HiClass.Persistence.Migrations
{
    [DbContext(typeof(SharedLessonDbContext))]
    partial class SharedLessonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FeedbackText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uuid");

                    b.Property<short?>("Rating")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("ReasonForNotConducting")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasTheJointLesson")
                        .HasColumnType("boolean");

                    b.HasKey("FeedbackId");

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.HasIndex("InvitationId");

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClassReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateOfInvitation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitationText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.HasKey("InvitationId");

                    b.HasIndex("ClassReceiverId");

                    b.HasIndex("ClassSenderId");

                    b.HasIndex("InvitationId")
                        .IsUnique();

                    b.HasIndex("UserReceiverId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Discipline", b =>
                {
                    b.Property<Guid>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("DisciplineId");

                    b.HasIndex("DisciplineId")
                        .IsUnique();

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            DisciplineId = new Guid("dd23051d-ca0d-4ebe-b5b8-8fc6dc1944b7"),
                            Title = "Russian language"
                        },
                        new
                        {
                            DisciplineId = new Guid("0cc2c2b7-546e-41b7-a5cd-ab58a1b18f02"),
                            Title = "Russian literature"
                        },
                        new
                        {
                            DisciplineId = new Guid("a403d2bd-6152-4ad2-b119-ac04b9b17b18"),
                            Title = "English as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("e941b2d6-6920-45c2-a364-72a48eba4713"),
                            Title = "German as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("5697de9b-7d51-48e2-a17f-37b0a7dc2364"),
                            Title = "French as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("ddac2ef3-c28c-4b62-815c-355f0ba78817"),
                            Title = "Italian as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("c1aff891-5217-432b-b292-f8799b84b77f"),
                            Title = "Spanish as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("9c09a62f-2b03-4385-b518-85e201768949"),
                            Title = "Chinese as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("f82ba4b2-9822-4478-9c13-15689b03d6df"),
                            Title = "Mathematics"
                        },
                        new
                        {
                            DisciplineId = new Guid("65cf077d-7934-4e76-a794-b1f1fa35a6a9"),
                            Title = "Social science"
                        },
                        new
                        {
                            DisciplineId = new Guid("590b963b-4691-4138-ace4-72a05b6c2869"),
                            Title = "Physics"
                        },
                        new
                        {
                            DisciplineId = new Guid("71c4d935-6681-463a-8f0c-9f034cc62e43"),
                            Title = "Astronomy"
                        },
                        new
                        {
                            DisciplineId = new Guid("83032e96-2bad-4592-90e6-d2c95ea39814"),
                            Title = "Chemistry"
                        },
                        new
                        {
                            DisciplineId = new Guid("e9db31c6-e0f8-4bb3-9583-f1dbab383a88"),
                            Title = "Biology"
                        },
                        new
                        {
                            DisciplineId = new Guid("cc8835d9-eb10-4a9c-865d-6b53c46b5bb8"),
                            Title = "Geography"
                        },
                        new
                        {
                            DisciplineId = new Guid("a3e53db1-b71f-42c5-b3ec-cbfe2a7874e2"),
                            Title = "History"
                        },
                        new
                        {
                            DisciplineId = new Guid("c288b6ba-488f-4cbd-a919-44f12854ae25"),
                            Title = "Computer science"
                        },
                        new
                        {
                            DisciplineId = new Guid("e53d5728-fda4-4f87-8808-52ad434cea13"),
                            Title = "Technology"
                        },
                        new
                        {
                            DisciplineId = new Guid("49826045-a769-4974-8b92-86bf35fe3850"),
                            Title = "World art"
                        },
                        new
                        {
                            DisciplineId = new Guid("81ecb3c1-1923-4af8-b2c8-c030dfc0bc55"),
                            Title = "Fine arts"
                        },
                        new
                        {
                            DisciplineId = new Guid("aa9a5ee7-f750-4d93-944e-0f82fdd8e0b0"),
                            Title = "Crafts"
                        },
                        new
                        {
                            DisciplineId = new Guid("37d30e49-3f94-43cf-9796-8f1e141ba2fa"),
                            Title = "Natural science"
                        },
                        new
                        {
                            DisciplineId = new Guid("5483a508-c65a-4cb8-b244-78c774825fcf"),
                            Title = "Music"
                        },
                        new
                        {
                            DisciplineId = new Guid("d7a7c51a-164c-4b2b-9bb1-21c5698bd11a"),
                            Title = "Economics"
                        },
                        new
                        {
                            DisciplineId = new Guid("22a59cd1-b2b5-4237-86ee-103028d95b6e"),
                            Title = "Regional studies"
                        },
                        new
                        {
                            DisciplineId = new Guid("d5257fef-c979-4082-a168-7bc47ab67c85"),
                            Title = "Project-based learning"
                        },
                        new
                        {
                            DisciplineId = new Guid("55be45bb-4db9-4b35-8932-ec3631fa1342"),
                            Title = "Cultural exchange"
                        },
                        new
                        {
                            DisciplineId = new Guid("38975553-53ef-4251-9d7c-85bc0314503a"),
                            Title = "Vacation education"
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("GradeNumber")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.HasKey("GradeId");

                    b.HasIndex("GradeId")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeId = new Guid("384ef411-6a63-4e98-9e1b-058ddae1212d"),
                            GradeNumber = 1
                        },
                        new
                        {
                            GradeId = new Guid("15b5170e-b767-4385-941c-b19810e17a95"),
                            GradeNumber = 2
                        },
                        new
                        {
                            GradeId = new Guid("50a4388e-a98f-453e-a1a8-480f6297478d"),
                            GradeNumber = 3
                        },
                        new
                        {
                            GradeId = new Guid("b5c94e0c-d1ee-4a22-9153-308436705ff4"),
                            GradeNumber = 4
                        },
                        new
                        {
                            GradeId = new Guid("3ed987ea-a5ac-4643-883c-5f521aabd0b9"),
                            GradeNumber = 5
                        },
                        new
                        {
                            GradeId = new Guid("350ef882-f289-4a29-9b56-34bd57fc9518"),
                            GradeNumber = 6
                        },
                        new
                        {
                            GradeId = new Guid("980008ea-cfda-4a2b-adcf-9bcf436e5144"),
                            GradeNumber = 7
                        },
                        new
                        {
                            GradeId = new Guid("2956798a-72a2-442b-8117-4dbe5b5b1a07"),
                            GradeNumber = 8
                        },
                        new
                        {
                            GradeId = new Guid("c7425242-3473-4eab-8c0b-0ca15c3b29a9"),
                            GradeNumber = 9
                        },
                        new
                        {
                            GradeId = new Guid("2f73e6f5-1be0-4bb1-a2d2-757c9d66d211"),
                            GradeNumber = 10
                        },
                        new
                        {
                            GradeId = new Guid("0c3a8dbe-0cfe-4d64-a110-59b105ed6b21"),
                            GradeNumber = 11
                        },
                        new
                        {
                            GradeId = new Guid("8e36cd92-491b-4663-823f-181bae28ee45"),
                            GradeNumber = 12
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("03de94c2-3063-4f3c-b0af-afea144c18bb"),
                            Title = "Russian"
                        },
                        new
                        {
                            LanguageId = new Guid("37d2a656-0a26-4b3c-823a-41cf21943c05"),
                            Title = "English"
                        },
                        new
                        {
                            LanguageId = new Guid("cabdc706-e6bb-4c19-811a-c92f4b62e499"),
                            Title = "German"
                        },
                        new
                        {
                            LanguageId = new Guid("9a1de628-37bd-44ec-84a1-f89b1039f2ea"),
                            Title = "Italian"
                        },
                        new
                        {
                            LanguageId = new Guid("31ddf0eb-1dd1-45f3-9bfc-6a2b60f6f112"),
                            Title = "Spanish"
                        },
                        new
                        {
                            LanguageId = new Guid("0219a2ae-391b-4195-8e1b-0578d64af8c1"),
                            Title = "French"
                        },
                        new
                        {
                            LanguageId = new Guid("92841a98-d634-411e-a7e6-23440ba9a3e6"),
                            Title = "Hungarian"
                        },
                        new
                        {
                            LanguageId = new Guid("9fdb0ebc-83ad-4b0c-bb9e-1007bd2a90fe"),
                            Title = "Portuguese"
                        },
                        new
                        {
                            LanguageId = new Guid("b8c5e54a-080d-4182-82cd-164c9eef9376"),
                            Title = "Belarusian"
                        },
                        new
                        {
                            LanguageId = new Guid("10c6e370-d290-41c8-afc9-cfd6384ae85c"),
                            Title = "Ukrainian"
                        },
                        new
                        {
                            LanguageId = new Guid("eff1dce2-c276-4413-b7ca-00dfb95598e3"),
                            Title = "Armenian"
                        },
                        new
                        {
                            LanguageId = new Guid("1fa1dd9a-50b5-4362-8ed7-c9685ea11e83"),
                            Title = "Georgian"
                        },
                        new
                        {
                            LanguageId = new Guid("7c374e70-3b86-4253-8319-a5b372b5e471"),
                            Title = "Azerbaijani"
                        },
                        new
                        {
                            LanguageId = new Guid("870596fa-ed0a-479f-a6d5-23602538fda6"),
                            Title = "Kazakh"
                        },
                        new
                        {
                            LanguageId = new Guid("9d909f71-ce02-414c-934e-2eb8ce6018f3"),
                            Title = "Kyrgyz"
                        },
                        new
                        {
                            LanguageId = new Guid("49dde30b-4db9-4db7-9cd8-2802b713715b"),
                            Title = "Tajik"
                        },
                        new
                        {
                            LanguageId = new Guid("098216ed-94aa-4fc9-8805-962f6cd53375"),
                            Title = "Uzbek"
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InstitutionId");

                    b.HasIndex("CityId");

                    b.HasIndex("InstitutionId")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("InstitutionTypeId");

                    b.HasIndex("InstitutionTypeId")
                        .IsUnique();

                    b.ToTable("InstitutionTypes");

                    b.HasData(
                        new
                        {
                            InstitutionTypeId = new Guid("c47425a5-f086-44d4-82f3-5c917cc6bbd8"),
                            Title = "School"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("2512d581-1589-4c94-acc2-26bd9e9a472b"),
                            Title = "Gymnasium"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("ac11ba64-38c4-466d-ad6b-7490f56b4ae9"),
                            Title = "Lyceum"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("73998bf5-10ea-4404-a9a9-d9e43f426326"),
                            Title = "College"
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("CityId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("841603e6-2bff-4c4c-ae08-3947bb193c41"),
                            Title = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("f634fbfb-bdf3-4cac-886f-817d0b3593f3"),
                            Title = "User"
                        },
                        new
                        {
                            RoleId = new Guid("ba2847d1-9520-4517-9cce-27180a253ff9"),
                            Title = "Manager"
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("BannerPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsATeacher")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAnExpert")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreatedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInstitutionVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("LastOnlineAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3,2)")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("ClassId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("ClassDisciplines");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageId", "ClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("LanguageId", "ClassId")
                        .IsUnique();

                    b.ToTable("ClassLanguages");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.HasKey("InstitutionTypeId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionTypeId", "InstitutionId")
                        .IsUnique();

                    b.ToTable("InstitutionTypesInstitutions");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("UserId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("UserDisciplines");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserGrade", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GradeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId", "GradeId")
                        .IsUnique();

                    b.ToTable("UserGrades");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId", "LanguageId")
                        .IsUnique();

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Feedback", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Communication.Invitation", "Invitation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("InvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedFeedbacks")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentFeedbacks")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitation");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Invitation", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Main.Class", "ClassReceiver")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ClassReceiverId")
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.Class", "ClassSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("ClassSenderId")
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "UserReceiver")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("UserReceiverId")
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("UserSenderId")
                        .IsRequired();

                    b.Navigation("ClassReceiver");

                    b.Navigation("ClassSender");

                    b.Navigation("UserReceiver");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.Institution", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Location.City", null)
                        .WithMany("Establishments")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.City", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Location.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Class", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.User", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Location.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HiClass.Domain.Entities.Location.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HiClass.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Education.Language", "Language")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Job.InstitutionType", "InstitutionType")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserGrade", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("UserGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("UserGrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Education.Language", "Language")
                        .WithMany("TeacherLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserRole", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Main.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Discipline", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("UserDisciplines");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("UserGrades");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Language", b =>
                {
                    b.Navigation("ClassLanguages");

                    b.Navigation("TeacherLanguages");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.Institution", b =>
                {
                    b.Navigation("InstitutionTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Navigation("InstitutionTypes");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.City", b =>
                {
                    b.Navigation("Establishments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Class", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("ClassLanguages");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentInvitations");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ReceivedFeedbacks");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentFeedbacks");

                    b.Navigation("SentInvitations");

                    b.Navigation("UserDisciplines");

                    b.Navigation("UserGrades");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
