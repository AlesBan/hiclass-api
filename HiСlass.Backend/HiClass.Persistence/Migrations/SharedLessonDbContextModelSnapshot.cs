// <auto-generated />
using System;
using HiClass.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HiClass.Persistence.Migrations
{
    [DbContext(typeof(SharedLessonDbContext))]
    partial class SharedLessonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClassReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateOfInvitation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitationText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.HasKey("InvitationId");

                    b.HasIndex("ClassReceiverId");

                    b.HasIndex("ClassSenderId");

                    b.HasIndex("InvitationId")
                        .IsUnique();

                    b.HasIndex("UserReceiverId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uuid");

                    b.Property<short?>("Rating")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("ReasonForNotConducting")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasTheJointLesson")
                        .HasColumnType("boolean");

                    b.HasKey("ReviewId");

                    b.HasIndex("InvitationId");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Discipline", b =>
                {
                    b.Property<Guid>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("DisciplineId");

                    b.HasIndex("DisciplineId")
                        .IsUnique();

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            DisciplineId = new Guid("4c55afb4-d23a-43f2-8c28-32848f5a58d4"),
                            Title = "Russian language"
                        },
                        new
                        {
                            DisciplineId = new Guid("4018cae9-a812-45dc-867e-f4a645d8c03b"),
                            Title = "Russian literature"
                        },
                        new
                        {
                            DisciplineId = new Guid("f0434994-eefc-4632-a5d3-cb36cd87124b"),
                            Title = "English as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("1a40572f-91f4-4f11-87c3-f922a247742d"),
                            Title = "German as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("480b561c-5ded-4359-a3c8-28231c9cfc4e"),
                            Title = "French as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("569c0e0a-68fd-4081-9e15-9eeeb20ceb1d"),
                            Title = "Italian as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("56a1fdcc-19f1-46f5-92dc-c72e549da754"),
                            Title = "Spanish as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("3cdb9e49-2924-40ae-a04e-b67f2dc9b449"),
                            Title = "Chinese as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("94e4774e-bbb4-441c-94a4-6f1b55b701b6"),
                            Title = "Mathematics"
                        },
                        new
                        {
                            DisciplineId = new Guid("09cbff99-719b-4d7b-a19f-797ccea6b2d8"),
                            Title = "Social science"
                        },
                        new
                        {
                            DisciplineId = new Guid("5f1c300a-aeef-4e2a-8276-e1c22e668477"),
                            Title = "Physics"
                        },
                        new
                        {
                            DisciplineId = new Guid("dfd06a69-2519-45db-adaa-cc70363c7ee6"),
                            Title = "Astronomy"
                        },
                        new
                        {
                            DisciplineId = new Guid("6fb8b96d-5ef4-4771-a346-f2cdde905a44"),
                            Title = "Chemistry"
                        },
                        new
                        {
                            DisciplineId = new Guid("a1251358-4375-4184-ac17-fb7746221997"),
                            Title = "Biology"
                        },
                        new
                        {
                            DisciplineId = new Guid("bdb9c610-cd2f-4f66-802a-3a35e7c4b8b8"),
                            Title = "Geography"
                        },
                        new
                        {
                            DisciplineId = new Guid("c9204aaa-2f32-41eb-8399-b3d46add9247"),
                            Title = "History"
                        },
                        new
                        {
                            DisciplineId = new Guid("4dc6942c-6ea1-468b-8f31-f5a97717d7a6"),
                            Title = "Computer science"
                        },
                        new
                        {
                            DisciplineId = new Guid("75aef381-c80b-414a-9b37-0396621118bf"),
                            Title = "Technology"
                        },
                        new
                        {
                            DisciplineId = new Guid("0ef1a191-9611-4544-82b6-b233bc991a05"),
                            Title = "World art"
                        },
                        new
                        {
                            DisciplineId = new Guid("b3a9b8f9-b457-4476-b3f1-011e47e0bc2c"),
                            Title = "Fine arts"
                        },
                        new
                        {
                            DisciplineId = new Guid("337abea7-1415-4937-b311-2278125ba3ae"),
                            Title = "Crafts"
                        },
                        new
                        {
                            DisciplineId = new Guid("9557f2f1-2c5e-467c-b2e0-9e62bff34991"),
                            Title = "Natural science"
                        },
                        new
                        {
                            DisciplineId = new Guid("5c93bf57-725a-4191-adc6-117a0ab4da91"),
                            Title = "Music"
                        },
                        new
                        {
                            DisciplineId = new Guid("c517fcb8-0eb4-43c0-a932-d388d01aec2d"),
                            Title = "Economics"
                        },
                        new
                        {
                            DisciplineId = new Guid("e10da506-728f-495d-899d-89d765812343"),
                            Title = "Regional studies"
                        },
                        new
                        {
                            DisciplineId = new Guid("60b51b03-7e21-4f0f-9d98-88b5042c31d6"),
                            Title = "Project-based learning"
                        },
                        new
                        {
                            DisciplineId = new Guid("7bec3001-7978-4fd5-ae57-2c88829c1b92"),
                            Title = "Cultural exchange"
                        },
                        new
                        {
                            DisciplineId = new Guid("4053a10b-304a-4c65-a582-81a3389aa790"),
                            Title = "Vacation education"
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("GradeNumber")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.HasKey("GradeId");

                    b.HasIndex("GradeId")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeId = new Guid("9e452ed0-9079-443d-91c5-6d80164add18"),
                            GradeNumber = 1
                        },
                        new
                        {
                            GradeId = new Guid("86cbe4a1-89e5-426f-b0bb-a4497a1415cb"),
                            GradeNumber = 2
                        },
                        new
                        {
                            GradeId = new Guid("2255f732-4a11-4e5c-bc3e-7ceda27bacd9"),
                            GradeNumber = 3
                        },
                        new
                        {
                            GradeId = new Guid("d724b1ac-9486-49c8-af12-0c9af10d7d2f"),
                            GradeNumber = 4
                        },
                        new
                        {
                            GradeId = new Guid("64dbd017-ebbe-4069-b92e-388b24097686"),
                            GradeNumber = 5
                        },
                        new
                        {
                            GradeId = new Guid("f965bdd8-fc54-4095-9d3f-0ac3c61d29ea"),
                            GradeNumber = 6
                        },
                        new
                        {
                            GradeId = new Guid("c9a03837-8057-4c84-9783-4038cee41300"),
                            GradeNumber = 7
                        },
                        new
                        {
                            GradeId = new Guid("9db15e60-2d4b-4610-ab50-f33541e1c3c6"),
                            GradeNumber = 8
                        },
                        new
                        {
                            GradeId = new Guid("b050ea7b-057f-4b91-a1a9-bb184d36233d"),
                            GradeNumber = 9
                        },
                        new
                        {
                            GradeId = new Guid("2bbb6c3e-2c3f-4009-bd9b-0f1e43ce33ba"),
                            GradeNumber = 10
                        },
                        new
                        {
                            GradeId = new Guid("b8047931-8913-4536-969c-749bb203af1b"),
                            GradeNumber = 11
                        },
                        new
                        {
                            GradeId = new Guid("00c66b7a-06ab-4477-b20e-571702267ceb"),
                            GradeNumber = 12
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("cfdd2b5c-51cb-4a65-b371-a9a6a4f4c606"),
                            Title = "Russian"
                        },
                        new
                        {
                            LanguageId = new Guid("27f18704-5290-4e88-8f33-af958db279d2"),
                            Title = "English"
                        },
                        new
                        {
                            LanguageId = new Guid("bb7b3a2d-25a8-4ce4-9210-7c4a5d2056b1"),
                            Title = "German"
                        },
                        new
                        {
                            LanguageId = new Guid("eec0d474-0f9b-44b5-98bb-fdb16907fd29"),
                            Title = "Italian"
                        },
                        new
                        {
                            LanguageId = new Guid("2d46efe6-c1a2-4703-a565-ad056c934141"),
                            Title = "Spanish"
                        },
                        new
                        {
                            LanguageId = new Guid("e0b5736f-0f1e-41f6-82e4-defa24f9c0fd"),
                            Title = "French"
                        },
                        new
                        {
                            LanguageId = new Guid("29852c01-7915-41f5-8ea3-7ea51ffe674a"),
                            Title = "Hungarian"
                        },
                        new
                        {
                            LanguageId = new Guid("430dfa30-4a14-421a-82a3-2ea29c220b58"),
                            Title = "Portuguese"
                        },
                        new
                        {
                            LanguageId = new Guid("8fe73360-2344-4adc-86fe-f706e1c555fe"),
                            Title = "Belarusian"
                        },
                        new
                        {
                            LanguageId = new Guid("a374806f-06e1-4768-9008-d434217a8ec1"),
                            Title = "Ukrainian"
                        },
                        new
                        {
                            LanguageId = new Guid("6b7cfb17-e862-43f0-b2d0-1cae3470cd49"),
                            Title = "Armenian"
                        },
                        new
                        {
                            LanguageId = new Guid("2dd6d00a-ae9b-4ffc-b802-9d0aba33e427"),
                            Title = "Georgian"
                        },
                        new
                        {
                            LanguageId = new Guid("d32c0860-7f11-478d-8123-a8e7e1386f22"),
                            Title = "Azerbaijani"
                        },
                        new
                        {
                            LanguageId = new Guid("5cdbd342-11ad-4795-8a8f-b5b4d3673f33"),
                            Title = "Kazakh"
                        },
                        new
                        {
                            LanguageId = new Guid("835217ba-20ac-4514-a92a-2e60ffd91ad2"),
                            Title = "Kyrgyz"
                        },
                        new
                        {
                            LanguageId = new Guid("49736615-80f7-423a-a5be-7002ea65df30"),
                            Title = "Tajik"
                        },
                        new
                        {
                            LanguageId = new Guid("010384ec-2c1a-4608-b042-966e197d788c"),
                            Title = "Uzbek"
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InstitutionId");

                    b.HasIndex("CityId");

                    b.HasIndex("InstitutionId")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("InstitutionTypeId");

                    b.HasIndex("InstitutionTypeId")
                        .IsUnique();

                    b.ToTable("InstitutionTypes");

                    b.HasData(
                        new
                        {
                            InstitutionTypeId = new Guid("5a167097-699e-48f3-97db-d6f1ecbb3b90"),
                            Title = "School"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("68741f87-137f-4d6c-8d40-1b8effcef242"),
                            Title = "Gymnasium"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("f85a7898-d0ec-4bef-925d-76fca251e837"),
                            Title = "Lyceum"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("284651e0-bd8f-46a9-b7fb-07aff1a232a5"),
                            Title = "College"
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("CityId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("a4e32536-215d-4075-a04b-97421ff50782"),
                            Title = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("902dc8f3-0a7d-4dd2-9a02-abc1a4bfb21f"),
                            Title = "User"
                        },
                        new
                        {
                            RoleId = new Guid("6b2560af-66f9-42bd-a4c2-c943cd62935e"),
                            Title = "Manager"
                        });
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("BannerPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsATeacher")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAnExpert")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreatedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInstitutionVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("LastOnlineAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3,2)")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("ClassId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("ClassDisciplines");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageId", "ClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("LanguageId", "ClassId")
                        .IsUnique();

                    b.ToTable("ClassLanguages");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.HasKey("InstitutionTypeId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionTypeId", "InstitutionId")
                        .IsUnique();

                    b.ToTable("InstitutionTypesInstitutions");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("UserId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("UserDisciplines");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserGrade", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GradeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId", "GradeId")
                        .IsUnique();

                    b.ToTable("UserGrades");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId", "LanguageId")
                        .IsUnique();

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Invitation", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Main.Class", "ClassReceiver")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ClassReceiverId")
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.Class", "ClassSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("ClassSenderId")
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "UserReceiver")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("UserReceiverId")
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("UserSenderId")
                        .IsRequired();

                    b.Navigation("ClassReceiver");

                    b.Navigation("ClassSender");

                    b.Navigation("UserReceiver");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Review", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Communication.Invitation", "Invitation")
                        .WithMany("Reviews")
                        .HasForeignKey("InvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedReviews")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentReviews")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitation");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.Institution", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Location.City", null)
                        .WithMany("Establishments")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.City", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Location.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Class", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.User", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Location.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HiClass.Domain.Entities.Location.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HiClass.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Education.Language", "Language")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Job.InstitutionType", "InstitutionType")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserGrade", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("UserGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("UserGrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Education.Language", "Language")
                        .WithMany("TeacherLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.EntityConnections.UserRole", b =>
                {
                    b.HasOne("HiClass.Domain.Entities.Main.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiClass.Domain.Entities.Main.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Discipline", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("UserDisciplines");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("UserGrades");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Education.Language", b =>
                {
                    b.Navigation("ClassLanguages");

                    b.Navigation("TeacherLanguages");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.Institution", b =>
                {
                    b.Navigation("InstitutionTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Navigation("InstitutionTypes");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.City", b =>
                {
                    b.Navigation("Establishments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Class", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("ClassLanguages");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentInvitations");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HiClass.Domain.Entities.Main.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("ReceivedReviews");

                    b.Navigation("SentInvitations");

                    b.Navigation("SentReviews");

                    b.Navigation("UserDisciplines");

                    b.Navigation("UserGrades");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
